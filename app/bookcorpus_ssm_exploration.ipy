# %%
from __future__ import annotations

import matplotlib.pyplot as plt
import numpy as np

with open("../data/ssm_labels.txt", "r") as file:
    labels = [ln.strip() for ln in file.readlines()]

ssm = np.load("../data/ssm_ap0.58.npy")


def label_subset(labels, indices):
    return [labels[i] for i in indices]


def ssm_subset(matrix, indices):
    return np.take(np.take(matrix, indices, axis=0), indices, axis=1)


def delete_half(matrix):
    ret = matrix.copy()
    for i, row in enumerate(ret):
        row[range(i, len(row))] = 0
    return ret


def plot_ssm(indices, cmap="BrBG"):
    matrix_subset = ssm_subset(ssm, indices) if indices else ssm
    labels_subset = label_subset(labels, indices) if indices else labels
    amount = len(indices)
    figsize = max(1, amount // 3.8)

    plt.figure(figsize=(figsize, figsize), dpi=80)
    plt.gca().matshow(matrix_subset.T, cmap=cmap)
    plt.yticks(range(amount), labels_subset)
    plt.xticks(range(amount), labels_subset, rotation=-90)
    plt.show()


def maximal_antichains(G, topo_order=None):
    antichains = map(set, nx.antichains(G, topo_order))
    candidates = []
    for antichain in antichains:
        print(f"Antichain {antichain}")
        if len(candidates) == 0:
            print("  Append first")
            candidates.append(antichain)
        else:
            new = True
            for i in range(len(candidates)):
                candidate = candidates[i]
                if antichain > candidate:
                    print(f"  superset of candidate {candidate}")
                    # antichain is a superset of an existing candidate, we replace it
                    candidates[i] = antichain
                    new = False
                    break
                elif antichain < antichain:
                    print(f"  subset of candidate {candidate}")
                    # antichain is a subset of an existing candidate, we can ignore it
                    new = False
                    break
            if new:
                print(f"  new candidate")
                candidates.append(antichain)

    return candidates


# %% Index sets
tops = (80, 166, 197, 256)
food = (
    2,
    5,
    18,
    21,
    22,
    27,
    29,
    33,
    43,
    51,
    52,
    53,
    55,
    57,
    60,
    62,
    71,
    74,
    75,
    85,
    95,
    101,
    102,
    112,
    118,
    121,
    127,
    129,
    140,
    151,
    159,
    162,
    174,
    177,
    181,
    182,
    185,
    212,
    225,
    227,
    230,
    243,
    247,
    249,
    251,
    269,
    282,
) + tops
granimal = (
    1,
    6,
    15,
    16,
    19,
    20,
    23,
    24,
    25,
    28,
    30,
    36,
    39,
    40,
    44,
    45,
    49,
    50,
    54,
    56,
    58,
    59,
    66,
    67,
    72,
    73,
    76,
    77,
    78,
    84,
    88,
    89,
    95,
    103,
    105,
    120,
    123,
    125,
    135,
    137,
    141,
    144,
    148,
    149,
    152,
    154,
    155,
    156,
    160,
    164,
    171,
    175,
    176,
    178,
    179,
    180,
    184,
    186,
    187,
    205,
    206,
    213,
    216,
    218,
    222,
    226,
    230,
    231,
    234,
    268,
    270,
    273,
    276,
    278,
    283,
    284,
    285,
    288,
    290,
    292,
) + tops
plant = (
    24,
    28,
    30,
    36,
    40,
    44,
    45,
    49,
    50,
    56,
    58,
    66,
    67,
    76,
    88,
    89,
    95,
    103,
    105,
    120,
    123,
    125,
    135,
    137,
    144,
    152,
    154,
    155,
    156,
    160,
    176,
    179,
    180,
    184,
    205,
    206,
    213,
    216,
    218,
    222,
    226,
    230,
    234,
    268,
    270,
    278,
    283,
    284,
    285,
    288,
    290,
) + tops
tree = (
    6,
    15,
    19,
    20,
    25,
    54,
    72,
    77,
    84,
    141,
    149,
    164,
    171,
    178,
    186,
    218,
    273,
    276,
    292,
) + tops
actual_tree = (
    6,
    15,
    19,
    20,
    25,
    54,
    72,
    66,
    84,
    141,
    149,
    164,
    171,
    178,
    186,
    197,
    256,
    273,
    292,
    80,
    166,
)

# %%
import networkx as nx

tree_subset = (256, 54, 171, 197, 148, 66)
plant_subset = (197, 256, 66, 285, 88)

idcs = plant

tree_l = label_subset(labels, idcs)
ssm_l = ssm_subset(ssm, idcs)

plot_ssm(idcs)

adjacency = ssm_l.copy()
adjacency[adjacency < 0.8] = 0

g = nx.from_numpy_array(adjacency, create_using=nx.DiGraph)
g_named = nx.relabel_nodes(g, {i: label for i, label in enumerate(tree_l)})
nx.draw(nx.transitive_reduction(g_named), with_labels=True)
# %%
import itertools as it

argwhere_bound = 0.5

t = nx.DiGraph()
t.add_nodes_from(g)
path = nx.dag_longest_path(g)
for node in it.islice(reversed(path), 1, None):
    row = ssm_l[node]
    for i in np.argwhere(row > argwhere_bound).flatten():
        t.add_edge(node, i)

nx.draw(
    nx.relabel_nodes(
        nx.transitive_reduction(t), {i: label for i, label in enumerate(tree_l)}
    ),
    with_labels=True,
)
# %%
