# %%
import matplotlib.pyplot as plt
import numpy as np
import numpy.linalg as la
from matplotlib.collections import PolyCollection
from matplotlib.patches import Ellipse as MEllipse
from mpl_toolkits.mplot3d.axes3d import Axes3D

from wsd.conceptors.conceptor import (
    Conceptor,
    Ellipse,
    angle_between_vectors,
    lissajous,
    loewner,
)
from wsd.util.angle import rad_to_deg


def unit():
    return MEllipse((0, 0), 2, 2, ec="black", ls=":", fc="none")


def crosshair():
    return MEllipse((0, 0), 0.005, 0.005, ec="black", ls="-", fc="black")


def conceptor(angle_deg, scalex, scaley, aperture=1):
    points = lissajous(1, 2, 0.2, np.arange(0, 2 * np.pi + 0.1, 0.1)) * np.array(
        [scalex, scaley]
    )
    angle = angle_deg * (np.pi / 180)
    print(angle / np.pi)
    rot = np.array([[np.cos(angle), np.sin(angle)], [-np.sin(angle), np.cos(angle)]])
    points = np.apply_along_axis(lambda s: rot @ s, 1, points)
    c = Conceptor.from_state_matrix(points, aperture)
    x, y = zip(*points)
    plt.scatter(x, y, s=0)
    plt.plot(*c.ellipse_vec())
    return c


# %%

points = lissajous(1, 2, 0.2, np.arange(0, 2 * np.pi + 0.1, 0.1))
points *= np.array([1.7, 1])
angle = 34 / 180 * np.pi
rot = np.array([[np.cos(angle), np.sin(angle)], [-np.sin(angle), np.cos(angle)]])
points = np.apply_along_axis(lambda s: rot @ s, 1, points)

x, y = zip(*points)
plt.scatter(x, y)

dpoints = lissajous(1, 2, 0.2, np.arange(0, 2 * np.pi + 0.1, 0.1))
dpoints *= np.array([2.3, 0.65])
dangle = 96 / 180 * np.pi
drot = np.array([[np.cos(dangle), np.sin(dangle)], [-np.sin(dangle), np.cos(dangle)]])
dpoints = np.apply_along_axis(lambda s: drot @ s, 1, dpoints)

dx, dy = zip(*dpoints)

plt.scatter(dx, dy)

# %%
d = Conceptor.from_state_matrix(dpoints, aperture=1)
c = Conceptor.from_state_matrix(points, aperture=1)

dell = d.ellipse_vec()
drell = d.R_ellipse()
cell = c.ellipse_vec()
crell = c.R_ellipse()

fig, (ax, bx) = plt.subplots(1, 2)

ax.set_aspect("equal")
ax.scatter(*zip(*points))
ax.plot(cell[0, ...], cell[1, ...], c="blue")
ax.plot(crell[0, ...], crell[1, ...], c="blue", ls="--")
ax.set_xlim(-2, 2)
ax.set_ylim(-2, 2)

ax.add_patch(unit())

bx.set_aspect("equal")
bx.scatter(*zip(*dpoints))
bx.plot(dell[0, ...], dell[1, ...], c="blue")
bx.plot(drell[0, ...], drell[1, ...], c="blue", ls="--")
bx.set_xlim(-2, 2)
bx.set_ylim(-2, 2)

bx.add_patch(unit())

# %%

# %%

fig, (a1, a2, a3) = plt.subplots(1, 3, figsize=(9, 3))

a1.set_aspect("equal")

a1.scatter(x, y, c="grey", marker=".")
ell = a1.add_patch(
    r_ellipse.to_patch(
        ls="-",
        fc="none",
        ec="black",
    )
)
xmin, xmax = min(x) - 0.1, max(x) + 0.1
ymin, ymax = min(y) - 0.1, max(y) + 0.1
mn = min(xmin, ymin)
mx = max(xmax, ymax)
a1.set_xlim([mn, mx])
a1.set_ylim([mn, mx])
a1.set_yticks([1, 0, -1])
a1.set_xticks([1, 0, -1])

a2.set_aspect("equal")

r_patch = a2.add_patch(r_ellipse.to_patch(lw=2, ls="-", fc="none", ec="grey"))
c_patch = a2.add_patch(c_ellipse.to_patch(lw=2, ls="-", fc="none", ec="black"))
a2.add_patch(MEllipse((0, 0), 2, 2, lw=1, fc="none", ls=":", ec="black"))

a2.set_yticks([1, 0, -1])
a2.set_xticks([1, 0, -1])


a3.set_aspect("equal")

r_patch = a3.add_patch(r_ellipse.to_patch(lw=1, ls=":", fc="none", ec="black"))
a3.add_patch(MEllipse((0, 0), 2, 2, lw=1, fc="none", ls=":", ec="black"))
c_patch = a3.add_patch(c_ellipse.to_patch(lw=2, ls="-", fc="none", ec="black"))

for aperture in [0.5, 1.5, 2, 10]:
    print(aperture)
    a3.add_patch(
        Conceptor.from_correlation_matrix(r, aperture=aperture)
        .ellipse()
        .to_patch(lw=2, ls="-", fc="none", ec="black")
    )

a3.set_yticks([1, 0, -1])
a3.set_xticks([1, 0, -1])

fig.show()

# %%
fig, ax = plt.subplots(figsize=(3, 3))
ax.set_aspect("equal")

ax.scatter(x, y, c="grey", marker=".")
ax.plot(crell[0, :], crell[1, :], c="black", lw=2)
xmin, xmax = min(x) - 0.1, max(x) + 0.1
ymin, ymax = min(y) - 0.1, max(y) + 0.1
mn = min(xmin, ymin)
mx = max(xmax, ymax)
ax.set_xlim([mn, mx])
ax.set_ylim([mn, mx])
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
fig.savefig("../data/plots/conceptor_1.pdf", bbox_inches="tight", pad_inches=0)
# %%

# %%
# %%
fig, ax = plt.subplots(figsize=(3, 3))
ax.set_aspect("equal")

ax.plot(*crell, c="grey", ls="--", lw=2)
ax.plot(*cell, c="black", lw=2)
ax.add_patch(unit())
ax.add_patch(crosshair())

ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
fig.savefig("../data/plots/conceptor_2.pdf", bbox_inches="tight", pad_inches=0)

# %%
fig, ax = plt.subplots(figsize=(3, 3))
ax.set_aspect("equal")

# ax.plot(*crell, c="black", ls=":", lw=1)
# ax.plot(*cell, c="black", lw=1, ls="--")
ax.add_patch(unit())
# ax.add_patch(crosshair())


for aperture in [0.1, *(np.linspace(0, 5, 16)[1:-1])]:
    ell = Conceptor.from_state_matrix(points, aperture=aperture).ellipse_vec()
    kwargs = dict(ls="--") if aperture == 1 else {}
    plt.plot(ell[0, :], ell[1, :], c="black", lw=1, **kwargs)

ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
fig.savefig("../data/plots/conceptor_3.pdf", bbox_inches="tight", pad_inches=0)


# %%
x = np.linspace(0, 15, 100)
ys = np.geomspace(0.01, 5, 10)


def scale(x, alpha):
    if alpha == 0:
        return 0
    val = x / (x + (alpha**-2))
    return val


fun = np.vectorize(scale, otypes=[np.float32])

zs = fun(*np.meshgrid(x, ys))

fig = plt.figure()
ax = fig.add_subplot()

for y, z in zip(ys, zs):
    ax.plot(x, z, label=f"$\\alpha={y:.2f}")

fig.savefig("test.pdf", bbox_inches="tight", pad_inches=0)


# %%


fig, ax = plt.subplots()
ax.add_patch(unit())
ax.add_patch(crosshair())
ax.plot(*c.ellipse_vec(), c="grey", ls="--", lw=2)
ax.plot(*c.neg.ellipse_vec(), c="black", lw=2)
# ax.plot(*d.ellipse_vec(), c="grey", ls="--")
# ax.plot(*d.neg.ellipse_vec(), c="black")
# ax.plot(*c.conj(d).ellipse_vec(), c="black")
# ax.plot(*c.dinsj(d).ellipse_vec(), c="black")
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_aspect("equal")

# %%
fig, ax = plt.subplots(figsize=(3, 3))
ax.set_aspect("equal")

ax.plot(*c.ellipse_vec(), c="grey", ls="--", lw=2)
ax.plot(*c.neg.ellipse_vec(), c="black", lw=2)

ax.add_patch(unit())
ax.add_patch(crosshair())

ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
fig.savefig("../data/plots/conceptor_neg.pdf", bbox_inches="tight", pad_inches=0)

# %%

fig, ax = plt.subplots(figsize=(3, 3))
ax.set_aspect("equal")

ax.plot(*c.ellipse_vec(), c="grey", ls="--", lw=2)
ax.plot(*c.conj(d).ellipse_vec(), c="black", lw=2)
ax.plot(*d.ellipse_vec(), c="grey", ls="--", lw=2)

ax.add_patch(unit())
ax.add_patch(crosshair())

ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
fig.savefig("../data/plots/conceptor_conj.pdf", bbox_inches="tight", pad_inches=0)


# %%

fig, ax = plt.subplots(figsize=(3, 3))
ax.set_aspect("equal")

ax.plot(*c.ellipse_vec(), c="grey", ls="--", lw=2)
ax.plot(*c.disj(d).ellipse_vec(), c="black", lw=2)
ax.plot(*d.ellipse_vec(), c="grey", ls="--", lw=2)

ax.add_patch(unit())
ax.add_patch(crosshair())

ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_yticks([1, 0, -1])
ax.set_xticks([1, 0, -1])
fig.savefig("../data/plots/conceptor_disj.pdf", bbox_inches="tight", pad_inches=0)

# %%

alphas = np.linspace(0.0001, 10, 1000)


# %%
def prep(ax):
    ax.set_aspect("equal")

    ax.add_patch(unit())
    ax.add_patch(crosshair())

    ax.set_xlim([-1, 1])
    ax.set_ylim([-1, 1])
    ax.set_yticks([1, 0, -1])
    ax.set_xticks([1, 0, -1])


def conceptor(angle_deg, scalex, scaley, aperture=1):
    points = lissajous(1, 2, 0.2, np.arange(0, 2 * np.pi + 0.1, 0.1)) * np.array(
        [scalex, scaley]
    )
    angle = angle_deg * (np.pi / 180)
    # print(angle / np.pi)
    rot = np.array([[np.cos(angle), np.sin(angle)], [-np.sin(angle), np.cos(angle)]])
    points = np.apply_along_axis(lambda s: rot @ s, 1, points)
    c = Conceptor.from_state_matrix(points, aperture)
    # x, y = zip(*points)
    # plt.scatter(x, y, s=0)
    # plt.plot(*c.ellipse_vec())
    return c


green = "#268981"
red = "#B17323"

a = conceptor(34, 2, 0.3)
b = conceptor(-80, 0.14, 0.6)

low = loewner(a, b)
print(low)
if low == 1:
    print("a ≥ b")
elif low == -1:
    print("a ≤ b")
else:
    print("a = b")
# %%
a = conceptor(34, 2, 0.3)
b = conceptor(-80, 0.14, 0.6)

low = loewner(a, b)
if low == 1:
    print("a ≥ b")
elif low == -1:
    print("a ≤ b")
else:
    print("a = b")

fig, ax = plt.subplots(1, 1, figsize=(3, 3))
prep(ax)

ax.plot(*a.ellipse_vec(), c=green, lw=2)
ax.plot(*b.ellipse_vec(), c=red, lw=2)

fig.savefig("../data/plots/low_a_geq_b.pdf")

# %%
a = conceptor(90, 0.3, 2)
b = conceptor(-80, 2, 1)

low = loewner(a, b)
if low == 1:
    print("a ≥ b")
elif low == -1:
    print("a ≤ b")
else:
    print("a = b")

fig, ax = plt.subplots(1, 1, figsize=(3, 3))
prep(ax)

ax.plot(*a.ellipse_vec(), c=green, lw=2)
ax.plot(*b.ellipse_vec(), c=red, lw=2)

fig.savefig("../data/plots/low_a_eq_b.pdf")

# %%

a = conceptor(223, 0.3, 2.5)
b = conceptor(210, 1, 5)

low = loewner(a, b)
if low == 1:
    print("a ≥ b")
elif low == -1:
    print("a ≤ b")
else:
    print("a = b")

fig, ax = plt.subplots(1, 1, figsize=(3, 3))
prep(ax)

ax.plot(*a.ellipse_vec(), c=green, lw=2)
ax.plot(*b.ellipse_vec(), c=red, lw=2)

fig.savefig("../data/plots/low_b_geq_a.pdf")

# %%

x = np.linspace(0, 150, 1000)
y = x / (x + 1)
dx = x[1] - x[0]
dydx = np.gradient(y, dx)

plt.plot(x, y)
plt.plot(x, dydx)
